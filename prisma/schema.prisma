// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  password String
  email    String   @unique
  cpf      String   @unique
  name     String
  status   String // enable or disable
  date     DateTime

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  consultation          Consultation[]
  surgery               Surgery[]
  surgicalProcedureList SurgicalProcedureList[]
  animal                Animal[]
  species               Species[]
  medicalSpecialty      MedicalSpecialty[]
  imageExamList         ImageExamList[]
  labExamList           LabExamList[]
  labExam               LabExam[]
  imageExam             ImageExam[]
  necropsy              necropsy[]
  animalOwner           AnimalOwner[]
  rule                  Rule[]                  @relation("user")
  auth                  Rule[]                  @relation("auth")

  @@map("user")
}

model Rule {
  id           Int    @id @default(autoincrement())
  resourceName String
  permission   String // r, w, d -> (read, write, delete)
  userId       String

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("user", fields: [userId], references: [id])
  auth User @relation("auth", fields: [authId], references: [id])

  @@unique([userId, resourceName])
  @@map("rule")
}

model Consultation {
  id                 Int      @id @default(autoincrement())
  animalId           String
  medicalSpecialtyId Int
  newCase            Boolean // new or retun
  procedureType      String // simple, complex, Intensive Care Unit
  date               DateTime

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth             User             @relation(fields: [authId], references: [id])
  animal           Animal           @relation(fields: [animalId], references: [id])
  medicalSpecialty MedicalSpecialty @relation(fields: [medicalSpecialtyId], references: [id])

  @@map("consultation")
}

model Surgery {
  id                  Int      @id @default(autoincrement())
  animalId            String
  surgicalProcedureId Int
  date                DateTime

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth              User                  @relation(fields: [authId], references: [id])
  surgicalProcedure SurgicalProcedureList @relation(fields: [surgicalProcedureId], references: [id])
  animal            Animal                @relation(fields: [animalId], references: [id])

  @@map("surgery")
}

model SurgicalProcedureList {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  type        String // simple, complex
  hide        Boolean

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth    User      @relation(fields: [authId], references: [id])
  surgery Surgery[]

  @@map("surgical_procedure")
}

model AnimalOwner {
  id           Int    @id @default(autoincrement())
  name         String
  phone        String
  email        String
  zipCode      String
  street       String
  number       String
  complement   String
  neighborhood String
  city         String
  uf           String

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  animal Animal[]
  auth   User     @relation(fields: [authId], references: [id])

  @@map("animal_owner")
}

model Animal {
  id        String   @id @default(nanoid())
  oldId     Int?
  name      String?
  speciesId Int
  birthDate DateTime
  sex       String // M or F
  weight    Float
  date      DateTime

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth            User           @relation(fields: [authId], references: [id])
  species         Species        @relation(fields: [speciesId], references: [id])
  surgery         Surgery[]
  consultation    Consultation[]
  labExamResult   LabExam[]
  imageExamResult ImageExam[]
  necropsy        necropsy[]
  animalOwner     AnimalOwner[]

  @@map("animal")
}

model Species {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  classification String // small animal, large animal, wild animal
  description    String
  hide           Boolean

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth   User     @relation(fields: [authId], references: [id])
  animal Animal[]

  @@map("species")
}

model MedicalSpecialty {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  consultationId Int?
  consultation   Consultation[]
  hide           Boolean

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth User? @relation(fields: [authId], references: [id])

  @@map("medical_specialty")
}

model ImageExamList {
  id              Int         @id @default(autoincrement())
  name            String
  description     String
  classification  String // simple, complex
  imageExamResult ImageExam[]
  date            DateTime
  hide            Boolean

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth User @relation(fields: [authId], references: [id])

  @@map("image_exam")
}

model LabExamList {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  date        DateTime
  hide        Boolean

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth    User      @relation(fields: [authId], references: [id])
  labExam LabExam[]

  @@map("lab_exam")
}

model LabExam {
  id        Int      @id @default(autoincrement())
  result    String
  animalId  String
  labExamId Int
  date      DateTime

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth    User        @relation(fields: [authId], references: [id])
  Animail Animal      @relation(fields: [animalId], references: [id])
  labExam LabExamList @relation(fields: [labExamId], references: [id])

  @@map("lab_exam_result")
}

model ImageExam {
  id          Int      @id @default(autoincrement())
  result      String
  animalId    String
  imageExamId Int
  date        DateTime

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth      User          @relation(fields: [authId], references: [id])
  imageExam ImageExamList @relation(fields: [imageExamId], references: [id])
  animail   Animal        @relation(fields: [animalId], references: [id])

  @@map("image_exam_result")
}

model necropsy {
  id       Int      @id @default(autoincrement())
  animalId String
  result   String
  date     DateTime

  authId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth   User   @relation(fields: [authId], references: [id])
  animal Animal @relation(fields: [animalId], references: [id])

  @@map("necropsy")
}
